#!/usr/bin/env python

import os
import sys
from optparse import OptionGroup, OptionParser, Values

from ONTraC.analysis.anndata import (create_adata, load_annotation_data,
                                     load_graph_pooling_results)
from ONTraC.data import load_dataset
from ONTraC.log import *
from ONTraC.utils import *


# ------------------------------------
# Misc Functions
# ------------------------------------
def prepare_optparser() -> OptionParser:
    """
    Prepare optparser object. New options will be added in thisfunction first.
    """

    prog_name = os.path.basename(sys.argv[0])
    usage = f'''USAGE: {prog_name} <-i input> <-o output>'''
    description = 'Create ONTraC output meta file.'

    # option processor
    optparser = OptionParser(version=f'{prog_name} 0.1', description=description, usage=usage, add_help_option=True)

    group_basic = OptionGroup(optparser, "Basci options for running")
    optparser.add_option('-r', '--raw', dest='raw', type='string', help='Required. Raw input file.')
    group_basic.add_option(
        '-i',
        '--input',
        dest='input',
        type='string',
        help='Directory contains input dataset. This directory should be the output directory of createDataSet.py.')
    group_basic.add_option('-o',
                           '--output',
                           dest='output',
                           type='string',
                           help='Directory contains ONTraC output results.')
    optparser.add_option_group(group_basic)

    return optparser


def opt_validate(optparser) -> Values:
    """Validate options from a OptParser object.

    Ret: Validated options object.
    """

    (options, args) = optparser.parse_args()

    # Whether input and output directory exists
    if not os.path.exists(options.input):
        raise FileNotFoundError(f"Cannot find input directory: {options.input}.")
    if not os.path.exists(options.output):
        raise FileNotFoundError(f"Cannot find output directory: {options.output}.")

    return options


# ------------------------------------
# Processing Functions
# ------------------------------------
def get_options() -> Values:
    optparser = prepare_optparser()
    options = opt_validate(optparser)
    options.name = os.path.basename(options.output)
    options.yaml = f'{options.input}/samples.yaml'
    return options


def load_data(options):
    # load data
    params = read_yaml_file(options.yaml)
    options.data = rel_params = get_rel_params(options, params)
    dataset, data = load_dataset(options)

    return dataset, data


# ------------------------------------
# Main Function
# ------------------------------------
def main():
    options = get_options()
    dataset, data = load_data(options)
    adata_dict, adata_combined = create_adata(options)
    load_annotation_data(options, data, adata_dict, adata_combined)
    adata_combined.obs.to_csv(f'{options.output}/GNN_output_meta.csv')


# ------------------------------------
# Program running
# ------------------------------------
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupts me! ;-) See you ^.^!\n")
        sys.exit(0)
